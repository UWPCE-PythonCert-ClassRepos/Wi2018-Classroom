Continuing to halve an odd number will never result in exactly 2. By extension, the program will only work if the user-entered argument is base 2, as only then will halving result in a value of 2. Otherwise, recursion continues, and n continues to get smaller, until the recursion limit is reached.

Below is my debugging log:
(Py3) 11:39@session15/ $ python -m ipdb recursive.py 
/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/runpy.py:125: RuntimeWarning: 'ipdb.__main__' found in sys.modules after import of package 'ipdb', but prior to execution of 'ipdb.__main__'; this may result in unpredictable behaviour
  warn(RuntimeWarning(msg))
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(1)<module>()
----> 1 import sys
      2 
      3 

ipdb> ll
----> 1 import sys
      2 
      3 
      4 def my_fun(n):
      5     if n == 2:
      6         return True
      7 
      8     return my_fun(n/2)
      9 
     10 
     11 if __name__ == '__main__':
     12     n = int(sys.argv[1])
     13     print(my_fun(n))

ipdb> n
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(4)<module>()
      3 
----> 4 def my_fun(n):
      5     if n == 2:

ipdb> n
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(11)<module>()
     10 
---> 11 if __name__ == '__main__':
     12     n = int(sys.argv[1])

ipdb> n
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(12)<module>()
     11 if __name__ == '__main__':
---> 12     n = int(sys.argv[1])
     13     print(my_fun(n))

ipdb> sys.argv[1] = 5
*** IndexError: list assignment index out of range
ipdb> sys.argv
['recursive.py']
ipdb> sys.argv.append(5)
ipdb> sys.argv
['recursive.py', 5]
ipdb> n
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(13)<module>()
     11 if __name__ == '__main__':
     12     n = int(sys.argv[1])
---> 13     print(my_fun(n))

ipdb> s
--Call--
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(4)my_fun()
      3 
----> 4 def my_fun(n):
      5     if n == 2:

ipdb> n
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(5)my_fun()
      4 def my_fun(n):
----> 5     if n == 2:
      6         return True

ipdb> pp n
5
ipdb> n
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(8)my_fun()
      7 
----> 8     return my_fun(n/2)
      9 

ipdb> n
Traceback (most recent call last):
  File "/Users/kgeoghe/.envs/Py3/lib/python3.6/site-packages/ipdb/__main__.py", line 169, in main
    pdb._runscript(mainpyfile)
  File "/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/pdb.py", line 1548, in _runscript
    self.run(statement)
  File "/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 434, in run
    exec(cmd, globals, locals)
  File "<string>", line 1, in <module>
  File "/Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py", line 13, in <module>
    print(my_fun(n))
  File "/Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py", line 8, in my_fun
    return my_fun(n/2)
  File "/Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py", line 8, in my_fun
    return my_fun(n/2)
  File "/Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py", line 8, in my_fun
    return my_fun(n/2)
  [Previous line repeated 2980 more times]
  File "/Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py", line 4, in my_fun
    def my_fun(n):
  File "/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 53, in trace_dispatch
    return self.dispatch_call(frame, arg)
  File "/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 79, in dispatch_call
    if not (self.stop_here(frame) or self.break_anywhere(frame)):
  File "/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 176, in break_anywhere
    return self.canonic(frame.f_code.co_filename) in self.breaks
  File "/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 32, in canonic
    if filename == "<" + filename[1:-1] + ">":
RecursionError: maximum recursion depth exceeded in comparison
Uncaught exception. Entering post mortem debugging
Running 'cont' or 'step' will restart the program
> /usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py(32)canonic()
     31     def canonic(self, filename):
---> 32         if filename == "<" + filename[1:-1] + ">":
     33             return filename

ipdb> n
Post mortem debugger finished. The recursive.py will be restarted
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(1)<module>()
----> 1 import sys
      2 
      3 

ipdb> n
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(4)<module>()
      3 
----> 4 def my_fun(n):
      5     if n == 2:

ipdb> pp n
*** NameError: name 'n' is not defined
ipdb> n
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(11)<module>()
     10 
---> 11 if __name__ == '__main__':
     12     n = int(sys.argv[1])

ipdb> 
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(12)<module>()
     11 if __name__ == '__main__':
---> 12     n = int(sys.argv[1])
     13     print(my_fun(n))

ipdb> pp n
*** NameError: name 'n' is not defined
ipdb> sys.argv
['recursive.py', 5]
ipdb> n
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(13)<module>()
     11 if __name__ == '__main__':
     12     n = int(sys.argv[1])
---> 13     print(my_fun(n))

ipdb> 
Traceback (most recent call last):
  File "/Users/kgeoghe/.envs/Py3/lib/python3.6/site-packages/ipdb/__main__.py", line 169, in main
    pdb._runscript(mainpyfile)
  File "/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/pdb.py", line 1548, in _runscript
    self.run(statement)
  File "/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 434, in run
    exec(cmd, globals, locals)
  File "<string>", line 1, in <module>
  File "/Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py", line 13, in <module>
    print(my_fun(n))
  File "/Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py", line 8, in my_fun
    return my_fun(n/2)
  File "/Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py", line 8, in my_fun
    return my_fun(n/2)
  File "/Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py", line 8, in my_fun
    return my_fun(n/2)
  [Previous line repeated 2980 more times]
  File "/Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py", line 4, in my_fun
    def my_fun(n):
  File "/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 53, in trace_dispatch
    return self.dispatch_call(frame, arg)
  File "/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 79, in dispatch_call
    if not (self.stop_here(frame) or self.break_anywhere(frame)):
  File "/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 176, in break_anywhere
    return self.canonic(frame.f_code.co_filename) in self.breaks
  File "/usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py", line 32, in canonic
    if filename == "<" + filename[1:-1] + ">":
RecursionError: maximum recursion depth exceeded in comparison
Uncaught exception. Entering post mortem debugging
Running 'cont' or 'step' will restart the program

> /usr/local/Cellar/python/3.6.5/Frameworks/Python.framework/Versions/3.6/lib/python3.6/bdb.py(32)canonic()
     31     def canonic(self, filename):
---> 32         if filename == "<" + filename[1:-1] + ">":
     33             return filename

ipdb> 
Post mortem debugger finished. The recursive.py will be restarted
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(1)<module>()
----> 1 import sys
      2 
      3 

ipdb> 
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(4)<module>()
      3 
----> 4 def my_fun(n):
      5     if n == 2:

ipdb> 
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(11)<module>()
     10 
---> 11 if __name__ == '__main__':
     12     n = int(sys.argv[1])

ipdb> 
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(12)<module>()
     11 if __name__ == '__main__':
---> 12     n = int(sys.argv[1])
     13     print(my_fun(n))

ipdb> 
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(13)<module>()
     11 if __name__ == '__main__':
     12     n = int(sys.argv[1])
---> 13     print(my_fun(n))

ipdb> s
--Call--
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(4)my_fun()
      3 
----> 4 def my_fun(n):
      5     if n == 2:

ipdb> n
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(5)my_fun()
      4 def my_fun(n):
----> 5     if n == 2:
      6         return True

ipdb> pp n
5
ipdb> n
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(8)my_fun()
      7 
----> 8     return my_fun(n/2)
      9 

ipdb> s
--Call--
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(4)my_fun()
      3 
----> 4 def my_fun(n):
      5     if n == 2:

ipdb> pp n
2.5
ipdb> n
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(5)my_fun()
      4 def my_fun(n):
----> 5     if n == 2:
      6         return True

ipdb> 
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(8)my_fun()
      7 
----> 8     return my_fun(n/2)
      9 

ipdb> s
--Call--
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(4)my_fun()
      3 
----> 4 def my_fun(n):
      5     if n == 2:

ipdb> pp n
1.25
ipdb> n
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(5)my_fun()
      4 def my_fun(n):
----> 5     if n == 2:
      6         return True

ipdb> n
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(8)my_fun()
      7 
----> 8     return my_fun(n/2)
      9 

ipdb> s
--Call--
> /Users/kgeoghe/src/Wi2018-Classroom/students/kevin/session15/recursive.py(4)my_fun()
      3 
----> 4 def my_fun(n):
      5     if n == 2:

ipdb> pp n
0.625

